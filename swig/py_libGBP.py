# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_py_libGBP', [dirname(__file__)])
        except ImportError:
            import _py_libGBP
            return _py_libGBP
        if fp is not None:
            try:
                _mod = imp.load_module('_py_libGBP', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _py_libGBP = swig_import_helper()
    del swig_import_helper
else:
    import _py_libGBP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class GaussianBeam(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaussianBeam, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GaussianBeam, name)
    __repr__ = _swig_repr
    def setFrequencyDP(self, *args): return _py_libGBP.GaussianBeam_setFrequencyDP(self, *args)
    def getFrequencyDP(self): return _py_libGBP.GaussianBeam_getFrequencyDP(self)
    def setWavelengthDP(self, *args): return _py_libGBP.GaussianBeam_setWavelengthDP(self, *args)
    def getWavelengthDP(self): return _py_libGBP.GaussianBeam_getWavelengthDP(self)
    def setWaistPositionDP(self, *args): return _py_libGBP.GaussianBeam_setWaistPositionDP(self, *args)
    def getWaistPositionDP(self): return _py_libGBP.GaussianBeam_getWaistPositionDP(self)
    def setWaistDiameterDP(self, *args): return _py_libGBP.GaussianBeam_setWaistDiameterDP(self, *args)
    def getWaistDiameterDP(self): return _py_libGBP.GaussianBeam_getWaistDiameterDP(self)
    def setPowerDP(self, *args): return _py_libGBP.GaussianBeam_setPowerDP(self, *args)
    def getPowerDP(self): return _py_libGBP.GaussianBeam_getPowerDP(self)
    def setCurrentPositionDP(self, *args): return _py_libGBP.GaussianBeam_setCurrentPositionDP(self, *args)
    def getCurrentPositionDP(self): return _py_libGBP.GaussianBeam_getCurrentPositionDP(self)
    def getFreeSpaceWavelengthDP(self): return _py_libGBP.GaussianBeam_getFreeSpaceWavelengthDP(self)
    def __init__(self): 
        this = _py_libGBP.new_GaussianBeam()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _py_libGBP.delete_GaussianBeam
    __del__ = lambda self : None;
GaussianBeam_swigregister = _py_libGBP.GaussianBeam_swigregister
GaussianBeam_swigregister(GaussianBeam)

import pint
ureg = pint.UnitRegistry()
Q_   = ureg.Quantity

@ureg.wraps( None, (None,ureg('hertz')), True )
def setFrequency (self,v):
  return self.setFrequencyDP(v)
GaussianBeam.setFrequency  = setFrequency 

@ureg.wraps( ureg('hertz'), None, True )
def getFrequency (self):
  return self.getFrequencyDP()
GaussianBeam.getFrequency = getFrequency 

@ureg.wraps( None, (None,ureg('nanometer')), True )
def setWavelength (self,v):
  return self.setWavelengthDP(v)
GaussianBeam.setWavelength  = setWavelength 

@ureg.wraps( ureg('nanometer'), None, True )
def getWavelength (self):
  return self.getWavelengthDP()
GaussianBeam.getWavelength = getWavelength 

@ureg.wraps( None, (None,ureg('centimeter')), True )
def setWaistPosition (self,v):
  return self.setWaistPositionDP(v)
GaussianBeam.setWaistPosition  = setWaistPosition 

@ureg.wraps( ureg('centimeter'), None, True )
def getWaistPosition (self):
  return self.getWaistPositionDP()
GaussianBeam.getWaistPosition = getWaistPosition 

@ureg.wraps( None, (None,ureg('centimeter')), True )
def setWaistDiameter (self,v):
  return self.setWaistDiameterDP(v)
GaussianBeam.setWaistDiameter  = setWaistDiameter 

@ureg.wraps( ureg('centimeter'), None, True )
def getWaistDiameter (self):
  return self.getWaistDiameterDP()
GaussianBeam.getWaistDiameter = getWaistDiameter 

@ureg.wraps( None, (None,ureg('watt')), True )
def setPower (self,v):
  return self.setPowerDP(v)
GaussianBeam.setPower  = setPower 

@ureg.wraps( ureg('watt'), None, True )
def getPower (self):
  return self.getPowerDP()
GaussianBeam.getPower = getPower 

@ureg.wraps( None, (None,ureg('centimeter')), True )
def setCurrentPosition (self,v):
  return self.setCurrentPositionDP(v)
GaussianBeam.setCurrentPosition  = setCurrentPosition 

@ureg.wraps( ureg('centimeter'), None, True )
def getCurrentPosition (self):
  return self.getCurrentPositionDP()
GaussianBeam.getCurrentPosition = getCurrentPosition 

@ureg.wraps( ureg('nanometer'), None, True )
def getFreeSpaceWavelength (self):
  return self.getFreeSpaceWavelengthDP()
GaussianBeam.getFreeSpaceWavelength = getFreeSpaceWavelength 

# This file is compatible with both classic and new-style classes.


